#include <iostream>
#include <vector>
#include <future>
#include <numeric>

long long partial_sum(const std::vector<int>& arr, size_t start, size_t end) {
    return std::accumulate(arr.begin() + start, arr.begin() + end, 0LL);
}

long long parallel_sum(const std::vector<int>& arr, size_t num_threads) {
    size_t size = arr.size();
    size_t chunk_size = (size + num_threads - 1) / num_threads;

    std::vector<std::future<long long>> futures;
    for (size_t i = 0; i < num_threads; ++i) {
        size_t start = i * chunk_size;
        size_t end = std::min(start + chunk_size, size);
        if (start < size)
            futures.push_back(std::async(std::launch::async, partial_sum, std::cref(arr), start, end));
    }

    long long total_sum = 0;
    for (auto& fut : futures) {
        total_sum += fut.get();
    }
    return total_sum;
}

int main() {
    std::vector<int> arr(2, 2);
    size_t num_threads = 8;
    std::cout << "Total Sum: " << parallel_sum(arr, num_threads) << std::endl;
}
